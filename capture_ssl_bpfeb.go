// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadCapture_ssl returns the embedded CollectionSpec for capture_ssl.
func loadCapture_ssl() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Capture_sslBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load capture_ssl: %w", err)
	}

	return spec, err
}

// loadCapture_sslObjects loads capture_ssl and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*capture_sslObjects
//	*capture_sslPrograms
//	*capture_sslMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadCapture_sslObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadCapture_ssl()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// capture_sslSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type capture_sslSpecs struct {
	capture_sslProgramSpecs
	capture_sslMapSpecs
}

// capture_sslSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type capture_sslProgramSpecs struct {
	CountPackets *ebpf.ProgramSpec `ebpf:"count_packets"`
}

// capture_sslMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type capture_sslMapSpecs struct {
	PktCount *ebpf.MapSpec `ebpf:"pkt_count"`
}

// capture_sslObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadCapture_sslObjects or ebpf.CollectionSpec.LoadAndAssign.
type capture_sslObjects struct {
	capture_sslPrograms
	capture_sslMaps
}

func (o *capture_sslObjects) Close() error {
	return _Capture_sslClose(
		&o.capture_sslPrograms,
		&o.capture_sslMaps,
	)
}

// capture_sslMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadCapture_sslObjects or ebpf.CollectionSpec.LoadAndAssign.
type capture_sslMaps struct {
	PktCount *ebpf.Map `ebpf:"pkt_count"`
}

func (m *capture_sslMaps) Close() error {
	return _Capture_sslClose(
		m.PktCount,
	)
}

// capture_sslPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadCapture_sslObjects or ebpf.CollectionSpec.LoadAndAssign.
type capture_sslPrograms struct {
	CountPackets *ebpf.Program `ebpf:"count_packets"`
}

func (p *capture_sslPrograms) Close() error {
	return _Capture_sslClose(
		p.CountPackets,
	)
}

func _Capture_sslClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed capture_ssl_bpfeb.o
var _Capture_sslBytes []byte
